{{#if description.length}}
/**
 * {{{ description }}}
 */
{{/if}}
open class {{{name}}} (
    {{#each properties}}
    @SerializedName("{{{specName}}}") val {{{name}}}: {{{type}}} {{~#unless isRequired}}? = null{{/unless}}{{#unless @last}},{{else}}{{#if ../inheritedProperties.length}},{{/if}}{{/unless}} {{#if description.length }} // {{#oneline}}{{{description}}}{{/oneline}} {{/if}}
    {{/each}}
    {{#each inheritedProperties}}
    {{{name}}}: {{{type}}} {{~#unless isRequired}}? = null{{/unless}} {{~#unless @last}},{{/unless}}
    {{/each}}
) : {{#if superclass}}{{{superclass}}}(
        {{#each inheritedProperties}}
        {{{name}}} = {{{name}}}{{~#unless @last}}, {{/unless}}
        {{/each}}
    ){{else}}Jsonable{{/if}} {

    override fun toString() = "{{{name}}}({{#each initializerProperties}}{{{name}}}=${{{name}}}{{#unless @last}}, {{/unless}}{{/each}})"
    
    override fun hashCode(): Int {
        {{#each initializerProperties}}
        {{#if @first}}
        var result:Int = {{{name}}}.hashCode()
        {{else}}
        result = 31 * result + {{{name}}}.hashCode()       
        {{/if}}
        {{/each}}
        return result
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as {{{name}}}

        {{#each initializerProperties}}
        if ({{{name}}} != other.{{{name}}}) return false
        {{/each}}

        return true
    }

    {{#if nestedModels.length}} 
        {{#each nestedModels}}
        {{> modelClassTemplate}}

        {{/each}}
    {{/if}}

}
